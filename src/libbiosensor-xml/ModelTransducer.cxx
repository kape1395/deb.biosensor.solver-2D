// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ModelTransducer.hxx"

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
        // AmperometricElectrode
        // 

        const AmperometricElectrode::bound_type& AmperometricElectrode::
        bound () const
        {
          return this->bound_.get ();
        }

        AmperometricElectrode::bound_type& AmperometricElectrode::
        bound ()
        {
          return this->bound_.get ();
        }

        void AmperometricElectrode::
        bound (const bound_type& x)
        {
          this->bound_.set (x);
        }

        void AmperometricElectrode::
        bound (::std::auto_ptr< bound_type > x)
        {
          this->bound_.set (x);
        }

        const AmperometricElectrode::substance_type& AmperometricElectrode::
        substance () const
        {
          return this->substance_.get ();
        }

        AmperometricElectrode::substance_type& AmperometricElectrode::
        substance ()
        {
          return this->substance_.get ();
        }

        void AmperometricElectrode::
        substance (const substance_type& x)
        {
          this->substance_.set (x);
        }

        void AmperometricElectrode::
        substance (::std::auto_ptr< substance_type > x)
        {
          this->substance_.set (x);
        }


        // InjectedElectrode
        // 

        const InjectedElectrode::medium_type& InjectedElectrode::
        medium () const
        {
          return this->medium_.get ();
        }

        InjectedElectrode::medium_type& InjectedElectrode::
        medium ()
        {
          return this->medium_.get ();
        }

        void InjectedElectrode::
        medium (const medium_type& x)
        {
          this->medium_.set (x);
        }

        void InjectedElectrode::
        medium (::std::auto_ptr< medium_type > x)
        {
          this->medium_.set (x);
        }

        const InjectedElectrode::reaction_type& InjectedElectrode::
        reaction () const
        {
          return this->reaction_.get ();
        }

        InjectedElectrode::reaction_type& InjectedElectrode::
        reaction ()
        {
          return this->reaction_.get ();
        }

        void InjectedElectrode::
        reaction (const reaction_type& x)
        {
          this->reaction_.set (x);
        }

        void InjectedElectrode::
        reaction (::std::auto_ptr< reaction_type > x)
        {
          this->reaction_.set (x);
        }


        // CompositeElectrode
        // 

        const CompositeElectrode::transducer_sequence& CompositeElectrode::
        transducer () const
        {
          return this->transducer_;
        }

        CompositeElectrode::transducer_sequence& CompositeElectrode::
        transducer ()
        {
          return this->transducer_;
        }

        void CompositeElectrode::
        transducer (const transducer_sequence& s)
        {
          this->transducer_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
        // AmperometricElectrode
        //

        AmperometricElectrode::
        AmperometricElectrode (const name_type& name,
                               const bound_type& bound,
                               const substance_type& substance)
        : ::bio::xml::model::Transducer (name),
          bound_ (bound, ::xml_schema::flags (), this),
          substance_ (substance, ::xml_schema::flags (), this)
        {
        }

        AmperometricElectrode::
        AmperometricElectrode (const AmperometricElectrode& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::bio::xml::model::Transducer (x, f, c),
          bound_ (x.bound_, f, this),
          substance_ (x.substance_, f, this)
        {
        }

        AmperometricElectrode::
        AmperometricElectrode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::bio::xml::model::Transducer (e, f | ::xml_schema::flags::base, c),
          bound_ (f, this),
          substance_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void AmperometricElectrode::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Transducer::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "bound" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< bound_type > r (
                bound_traits::create (i, f, this));

              this->bound_.set (r);
              continue;
            }

            if (n.name () == "substance" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< substance_type > r (
                substance_traits::create (i, f, this));

              this->substance_.set (r);
              continue;
            }
          }

          if (!bound_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "bound",
              "");
          }

          if (!substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "substance",
              "");
          }
        }

        AmperometricElectrode* AmperometricElectrode::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AmperometricElectrode (*this, f, c);
        }

        AmperometricElectrode::
        ~AmperometricElectrode ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AmperometricElectrode >
        _xsd_AmperometricElectrode_type_factory_init (
          "AmperometricElectrode",
          "http://karolis.5grupe.lt/biosensor/model/transducer");

        // InjectedElectrode
        //

        InjectedElectrode::
        InjectedElectrode (const name_type& name,
                           const medium_type& medium,
                           const reaction_type& reaction)
        : ::bio::xml::model::Transducer (name),
          medium_ (medium, ::xml_schema::flags (), this),
          reaction_ (reaction, ::xml_schema::flags (), this)
        {
        }

        InjectedElectrode::
        InjectedElectrode (const InjectedElectrode& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::bio::xml::model::Transducer (x, f, c),
          medium_ (x.medium_, f, this),
          reaction_ (x.reaction_, f, this)
        {
        }

        InjectedElectrode::
        InjectedElectrode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::bio::xml::model::Transducer (e, f | ::xml_schema::flags::base, c),
          medium_ (f, this),
          reaction_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void InjectedElectrode::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Transducer::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "medium" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< medium_type > r (
                medium_traits::create (i, f, this));

              this->medium_.set (r);
              continue;
            }

            if (n.name () == "reaction" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< reaction_type > r (
                reaction_traits::create (i, f, this));

              this->reaction_.set (r);
              continue;
            }
          }

          if (!medium_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "medium",
              "");
          }

          if (!reaction_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "reaction",
              "");
          }
        }

        InjectedElectrode* InjectedElectrode::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class InjectedElectrode (*this, f, c);
        }

        InjectedElectrode::
        ~InjectedElectrode ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, InjectedElectrode >
        _xsd_InjectedElectrode_type_factory_init (
          "InjectedElectrode",
          "http://karolis.5grupe.lt/biosensor/model/transducer");

        // CompositeElectrode
        //

        CompositeElectrode::
        CompositeElectrode (const name_type& name)
        : ::bio::xml::model::Transducer (name),
          transducer_ (::xml_schema::flags (), this)
        {
        }

        CompositeElectrode::
        CompositeElectrode (const CompositeElectrode& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::bio::xml::model::Transducer (x, f, c),
          transducer_ (x.transducer_, f, this)
        {
        }

        CompositeElectrode::
        CompositeElectrode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::bio::xml::model::Transducer (e, f | ::xml_schema::flags::base, c),
          transducer_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void CompositeElectrode::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Transducer::parse (p, f);

          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // transducer
            //
            {
              ::xsd::cxx::tree::type_factory_map< char >& tfm (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

              ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
                tfm.create (
                  "transducer",
                  "http://karolis.5grupe.lt/biosensor/model/transducer",
                  &::xsd::cxx::tree::factory_impl< transducer_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::auto_ptr< transducer_type > r (
                  dynamic_cast< transducer_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->transducer_.push_back (r);
                continue;
              }
            }

            break;
          }
        }

        CompositeElectrode* CompositeElectrode::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompositeElectrode (*this, f, c);
        }

        CompositeElectrode::
        ~CompositeElectrode ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompositeElectrode >
        _xsd_CompositeElectrode_type_factory_init (
          "CompositeElectrode",
          "http://karolis.5grupe.lt/biosensor/model/transducer");
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
        void
        operator<< (::xercesc::DOMElement& e, const AmperometricElectrode& i)
        {
          e << static_cast< const ::bio::xml::model::Transducer& > (i);

          // bound
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "bound",
                e));

            a << i.bound ();
          }

          // substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "substance",
                e));

            a << i.substance ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AmperometricElectrode >
        _xsd_AmperometricElectrode_type_serializer_init (
          "AmperometricElectrode",
          "http://karolis.5grupe.lt/biosensor/model/transducer");


        void
        operator<< (::xercesc::DOMElement& e, const InjectedElectrode& i)
        {
          e << static_cast< const ::bio::xml::model::Transducer& > (i);

          // medium
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "medium",
                e));

            a << i.medium ();
          }

          // reaction
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "reaction",
                e));

            a << i.reaction ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, InjectedElectrode >
        _xsd_InjectedElectrode_type_serializer_init (
          "InjectedElectrode",
          "http://karolis.5grupe.lt/biosensor/model/transducer");


        void
        operator<< (::xercesc::DOMElement& e, const CompositeElectrode& i)
        {
          e << static_cast< const ::bio::xml::model::Transducer& > (i);

          // transducer
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompositeElectrode::transducer_const_iterator
                 b (i.transducer ().begin ()), n (i.transducer ().end ());
                 b != n; ++b)
            {
              if (typeid (CompositeElectrode::transducer_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "transducer",
                    "http://karolis.5grupe.lt/biosensor/model/transducer",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "transducer",
                  "http://karolis.5grupe.lt/biosensor/model/transducer",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompositeElectrode >
        _xsd_CompositeElectrode_type_serializer_init (
          "CompositeElectrode",
          "http://karolis.5grupe.lt/biosensor/model/transducer");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

