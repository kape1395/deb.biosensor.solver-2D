// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from ModelSolver.xsd.
 */

#ifndef MODEL_SOLVER_HXX
#define MODEL_SOLVER_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;


  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace solver
      {
        class FiniteDifferences;
        class Explicit1D;
        class Implicit1D;
        class Explicit2D;
        class Implicit2D;
        class Axis;
        class ConstantAxisPart;
        class BilinearAxisPart;
        class ConcentrationProfile;
        class CurrentDensity;
        class AveragedConcentration;
        class SteadyStateHalfTime;
        class SteadyState;
        class Kinetic;
        class StopCondition;
        class StopConditionValidAfter;
        class FailIfAbove;
        class FailIfInvalidConcentrations;
        class FailOnConcentrationOscillation;
        class FailISumOfConcentrationsNonConst;
        class CurrentDensityGradient;
        class TimeStepAdjuster;
        class SimpleTimeStepAdjuster;
        class AdaptiveTimeStepAdjuster;
        class increase;
        class fallback;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "Model.hxx"

namespace bio
{
  namespace xml
  {
    namespace model
    {
      /**
       * @brief C++ namespace for the %http://karolis.5grupe.lt/biosensor/model/solver
       * schema namespace.
       */
      namespace solver
      {
        /**
         * @brief Class corresponding to the %FiniteDifferences schema type.
         *
         * @nosubgrouping
         */
        class FiniteDifferences: public ::bio::xml::model::Solver
        {
          public:
          /**
           * @name axis
           *
           * @brief Accessor and modifier functions for the %axis
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::Axis axis_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< axis_type > axis_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef axis_sequence::iterator axis_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef axis_sequence::const_iterator axis_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< axis_type, char > axis_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const axis_sequence&
          axis () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          axis_sequence&
          axis ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          axis (const axis_sequence& s);

          //@}

          /**
           * @name stopCondition
           *
           * @brief Accessor and modifier functions for the %stopCondition
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::StopCondition stopCondition_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< stopCondition_type > stopCondition_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef stopCondition_sequence::iterator stopCondition_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef stopCondition_sequence::const_iterator stopCondition_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< stopCondition_type, char > stopCondition_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const stopCondition_sequence&
          stopCondition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          stopCondition_sequence&
          stopCondition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          stopCondition (const stopCondition_sequence& s);

          //@}

          /**
           * @name timeStepAdjuster
           *
           * @brief Accessor and modifier functions for the %timeStepAdjuster
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::TimeStepAdjuster timeStepAdjuster_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< timeStepAdjuster_type > timeStepAdjuster_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< timeStepAdjuster_type, char > timeStepAdjuster_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const timeStepAdjuster_optional&
          timeStepAdjuster () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          timeStepAdjuster_optional&
          timeStepAdjuster ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          timeStepAdjuster (const timeStepAdjuster_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          timeStepAdjuster (const timeStepAdjuster_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          timeStepAdjuster (::std::auto_ptr< timeStepAdjuster_type > p);

          //@}

          /**
           * @name timeStep
           *
           * @brief Accessor and modifier functions for the %timeStep
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ timeStep_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< timeStep_type, char, ::xsd::cxx::tree::schema_type::double_ > timeStep_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const timeStep_type&
          timeStep () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          timeStep_type&
          timeStep ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          timeStep (const timeStep_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FiniteDifferences (const timeStep_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FiniteDifferences (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          FiniteDifferences (const FiniteDifferences& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FiniteDifferences*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~FiniteDifferences ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          axis_sequence axis_;
          stopCondition_sequence stopCondition_;
          timeStepAdjuster_optional timeStepAdjuster_;
          ::xsd::cxx::tree::one< timeStep_type > timeStep_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %Explicit1D schema type.
         *
         * @nosubgrouping
         */
        class Explicit1D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Explicit1D (const timeStep_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Explicit1D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Explicit1D (const Explicit1D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Explicit1D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Explicit1D ();
        };

        /**
         * @brief Class corresponding to the %Implicit1D schema type.
         *
         * @nosubgrouping
         */
        class Implicit1D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Implicit1D (const timeStep_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Implicit1D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Implicit1D (const Implicit1D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Implicit1D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Implicit1D ();
        };

        /**
         * @brief Class corresponding to the %Explicit2D schema type.
         *
         * @nosubgrouping
         */
        class Explicit2D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Explicit2D (const timeStep_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Explicit2D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Explicit2D (const Explicit2D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Explicit2D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Explicit2D ();
        };

        /**
         * @brief Class corresponding to the %Implicit2D schema type.
         *
         * @nosubgrouping
         */
        class Implicit2D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Implicit2D (const timeStep_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Implicit2D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Implicit2D (const Implicit2D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Implicit2D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Implicit2D ();
        };

        /**
         * @brief Class corresponding to the %Axis schema type.
         *
         * @nosubgrouping
         */
        class Axis: public ::xml_schema::type
        {
          public:
          /**
           * @name from
           *
           * @brief Accessor and modifier functions for the %from
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::SymbolName from_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const from_type&
          from () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          from_type&
          from ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          from (const from_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          from (::std::auto_ptr< from_type > p);

          //@}

          /**
           * @name to
           *
           * @brief Accessor and modifier functions for the %to
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::SymbolName to_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const to_type&
          to () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          to_type&
          to ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          to (const to_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          to (::std::auto_ptr< to_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Axis (const from_type&,
                const to_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Axis (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Axis (const Axis& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Axis*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Axis ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< from_type > from_;
          ::xsd::cxx::tree::one< to_type > to_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ConstantAxisPart schema type.
         *
         * @nosubgrouping
         */
        class ConstantAxisPart: public ::bio::xml::model::solver::Axis
        {
          public:
          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer stepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const stepCount_type&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          stepCount_type&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConstantAxisPart (const from_type&,
                            const to_type&,
                            const stepCount_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConstantAxisPart (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConstantAxisPart (const ConstantAxisPart& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConstantAxisPart*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConstantAxisPart ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< stepCount_type > stepCount_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BilinearAxisPart schema type.
         *
         * @nosubgrouping
         */
        class BilinearAxisPart: public ::bio::xml::model::solver::Axis
        {
          public:
          /**
           * @name startStep
           *
           * @brief Accessor and modifier functions for the %startStep
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ startStep_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< startStep_type, char, ::xsd::cxx::tree::schema_type::double_ > startStep_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const startStep_type&
          startStep () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          startStep_type&
          startStep ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          startStep (const startStep_type& x);

          //@}

          /**
           * @name factor
           *
           * @brief Accessor and modifier functions for the %factor
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ factor_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< factor_type, char, ::xsd::cxx::tree::schema_type::double_ > factor_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const factor_type&
          factor () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          factor_type&
          factor ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          factor (const factor_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BilinearAxisPart (const from_type&,
                            const to_type&,
                            const startStep_type&,
                            const factor_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BilinearAxisPart (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BilinearAxisPart (const BilinearAxisPart& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BilinearAxisPart*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BilinearAxisPart ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< startStep_type > startStep_;
          ::xsd::cxx::tree::one< factor_type > factor_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ConcentrationProfile schema type.
         *
         * @nosubgrouping
         */
        class ConcentrationProfile: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name precision
           *
           * @brief Accessor and modifier functions for the %precision
           * optional attribute.
           *
           * Precision, used when formatting numbers for the output.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ precision_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< precision_type > precision_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< precision_type, char > precision_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const precision_optional&
          precision () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          precision_optional&
          precision ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          precision (const precision_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          precision (const precision_optional& x);

          //@}

          /**
           * @name inMemory
           *
           * @brief Accessor and modifier functions for the %inMemory
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean inMemory_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< inMemory_type, char > inMemory_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const inMemory_type&
          inMemory () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          inMemory_type&
          inMemory ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          inMemory (const inMemory_type& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static inMemory_type
          inMemory_default_value ();

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConcentrationProfile (const name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConcentrationProfile (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConcentrationProfile (const ConcentrationProfile& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConcentrationProfile*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConcentrationProfile ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          precision_optional precision_;
          ::xsd::cxx::tree::one< inMemory_type > inMemory_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CurrentDensity schema type.
         *
         * @nosubgrouping
         */
        class CurrentDensity: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CurrentDensity (const name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CurrentDensity (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CurrentDensity (const CurrentDensity& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CurrentDensity*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CurrentDensity ();
        };

        /**
         * @brief Class corresponding to the %AveragedConcentration schema type.
         *
         * @nosubgrouping
         */
        class AveragedConcentration: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name medium
           *
           * @brief Accessor and modifier functions for the %medium
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::MediumName medium_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< medium_type > medium_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< medium_type, char > medium_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const medium_optional&
          medium () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          medium_optional&
          medium ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          medium (const medium_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          medium (const medium_optional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          medium (::std::auto_ptr< medium_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AveragedConcentration (const name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AveragedConcentration (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AveragedConcentration (const AveragedConcentration& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AveragedConcentration*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AveragedConcentration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          medium_optional medium_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SteadyStateHalfTime schema type.
         *
         * @nosubgrouping
         */
        class SteadyStateHalfTime: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SteadyStateHalfTime (const name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SteadyStateHalfTime (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SteadyStateHalfTime (const SteadyStateHalfTime& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SteadyStateHalfTime*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SteadyStateHalfTime ();
        };

        /**
         * @brief Class corresponding to the %SteadyState schema type.
         *
         * @nosubgrouping
         */
        class SteadyState: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name output
           *
           * @brief Accessor and modifier functions for the %output
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::SolverOutput output_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< output_type > output_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef output_sequence::iterator output_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef output_sequence::const_iterator output_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const output_sequence&
          output () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          output_sequence&
          output ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          output (const output_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SteadyState (const name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SteadyState (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SteadyState (const SteadyState& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SteadyState*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SteadyState ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          output_sequence output_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %Kinetic schema type.
         *
         * @nosubgrouping
         */
        class Kinetic: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name output
           *
           * @brief Accessor and modifier functions for the %output
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::SolverOutput output_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< output_type > output_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef output_sequence::iterator output_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef output_sequence::const_iterator output_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const output_sequence&
          output () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          output_sequence&
          output ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          output (const output_sequence& s);

          //@}

          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ stepCount_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< stepCount_type > stepCount_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const stepCount_optional&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          stepCount_optional&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          stepCount (const stepCount_optional& x);

          //@}

          /**
           * @name time
           *
           * @brief Accessor and modifier functions for the %time
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ time_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< time_type > time_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< time_type, char, ::xsd::cxx::tree::schema_type::double_ > time_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const time_optional&
          time () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          time_optional&
          time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          time (const time_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          time (const time_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Kinetic (const name_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Kinetic (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Kinetic (const Kinetic& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Kinetic*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Kinetic ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          output_sequence output_;
          stepCount_optional stepCount_;
          time_optional time_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %StopCondition schema type.
         *
         * @nosubgrouping
         */
        class StopCondition: public ::xml_schema::type
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          StopCondition ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopCondition (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopCondition (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopCondition (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          StopCondition (const StopCondition& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StopCondition*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~StopCondition ();
        };

        /**
         * @brief Class corresponding to the %StopConditionValidAfter schema type.
         *
         * @nosubgrouping
         */
        class StopConditionValidAfter: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name stopCondition
           *
           * @brief Accessor and modifier functions for the %stopCondition
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::StopCondition stopCondition_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< stopCondition_type > stopCondition_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef stopCondition_sequence::iterator stopCondition_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef stopCondition_sequence::const_iterator stopCondition_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< stopCondition_type, char > stopCondition_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const stopCondition_sequence&
          stopCondition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          stopCondition_sequence&
          stopCondition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          stopCondition (const stopCondition_sequence& s);

          //@}

          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ stepCount_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< stepCount_type > stepCount_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const stepCount_optional&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          stepCount_optional&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          stepCount (const stepCount_optional& x);

          //@}

          /**
           * @name time
           *
           * @brief Accessor and modifier functions for the %time
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ time_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< time_type > time_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< time_type, char, ::xsd::cxx::tree::schema_type::double_ > time_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const time_optional&
          time () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          time_optional&
          time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          time (const time_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          time (const time_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          StopConditionValidAfter ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopConditionValidAfter (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          StopConditionValidAfter (const StopConditionValidAfter& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StopConditionValidAfter*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~StopConditionValidAfter ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          stopCondition_sequence stopCondition_;
          stepCount_optional stepCount_;
          time_optional time_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %FailIfAbove schema type.
         *
         * @nosubgrouping
         */
        class FailIfAbove: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ stepCount_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< stepCount_type > stepCount_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const stepCount_optional&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          stepCount_optional&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          stepCount (const stepCount_optional& x);

          //@}

          /**
           * @name time
           *
           * @brief Accessor and modifier functions for the %time
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ time_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< time_type > time_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< time_type, char, ::xsd::cxx::tree::schema_type::double_ > time_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const time_optional&
          time () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          time_optional&
          time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          time (const time_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          time (const time_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailIfAbove ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfAbove (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          FailIfAbove (const FailIfAbove& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailIfAbove*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~FailIfAbove ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          stepCount_optional stepCount_;
          time_optional time_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %FailIfInvalidConcentrations schema type.
         *
         * @nosubgrouping
         */
        class FailIfInvalidConcentrations: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailIfInvalidConcentrations ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfInvalidConcentrations (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfInvalidConcentrations (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfInvalidConcentrations (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          FailIfInvalidConcentrations (const FailIfInvalidConcentrations& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailIfInvalidConcentrations*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~FailIfInvalidConcentrations ();
        };

        /**
         * @brief Class corresponding to the %FailOnConcentrationOscillation schema type.
         *
         * Should fail, is oscilations are found in the concentrations.
         * I.e. second partial derivatives for adjacent points have different
         * sign.
         *
         * @nosubgrouping
         */
        class FailOnConcentrationOscillation: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailOnConcentrationOscillation ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailOnConcentrationOscillation (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailOnConcentrationOscillation (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailOnConcentrationOscillation (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          FailOnConcentrationOscillation (const FailOnConcentrationOscillation& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailOnConcentrationOscillation*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~FailOnConcentrationOscillation ();
        };

        /**
         * @brief Class corresponding to the %FailISumOfConcentrationsNonConst schema type.
         *
         * @nosubgrouping
         */
        class FailISumOfConcentrationsNonConst: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name substance
           *
           * @brief Accessor and modifier functions for the %substance
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::SubstanceName substance_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< substance_type > substance_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef substance_sequence::iterator substance_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef substance_sequence::const_iterator substance_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< substance_type, char > substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const substance_sequence&
          substance () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          substance_sequence&
          substance ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          substance (const substance_sequence& s);

          //@}

          /**
           * @name medium
           *
           * @brief Accessor and modifier functions for the %medium
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::MediumName medium_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< medium_type, char > medium_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const medium_type&
          medium () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          medium_type&
          medium ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          medium (const medium_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          medium (::std::auto_ptr< medium_type > p);

          //@}

          /**
           * @name sum
           *
           * @brief Accessor and modifier functions for the %sum
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::SymbolName sum_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< sum_type, char > sum_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const sum_type&
          sum () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          sum_type&
          sum ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          sum (const sum_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          sum (::std::auto_ptr< sum_type > p);

          //@}

          /**
           * @name error
           *
           * @brief Accessor and modifier functions for the %error
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ error_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< error_type, char, ::xsd::cxx::tree::schema_type::double_ > error_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const error_type&
          error () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          error_type&
          error ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          error (const error_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailISumOfConcentrationsNonConst (const medium_type&,
                                            const sum_type&,
                                            const error_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailISumOfConcentrationsNonConst (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          FailISumOfConcentrationsNonConst (const FailISumOfConcentrationsNonConst& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailISumOfConcentrationsNonConst*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~FailISumOfConcentrationsNonConst ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          substance_sequence substance_;
          ::xsd::cxx::tree::one< medium_type > medium_;
          ::xsd::cxx::tree::one< sum_type > sum_;
          ::xsd::cxx::tree::one< error_type > error_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %CurrentDensityGradient schema type.
         *
         * @nosubgrouping
         */
        class CurrentDensityGradient: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name lessThan
           *
           * @brief Accessor and modifier functions for the %lessThan
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ lessThan_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< lessThan_type, char, ::xsd::cxx::tree::schema_type::double_ > lessThan_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const lessThan_type&
          lessThan () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          lessThan_type&
          lessThan ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          lessThan (const lessThan_type& x);

          //@}

          /**
           * @name normalized
           *
           * @brief Accessor and modifier functions for the %normalized
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean normalized_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< normalized_type, char > normalized_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const normalized_type&
          normalized () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          normalized_type&
          normalized ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          normalized (const normalized_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CurrentDensityGradient (const lessThan_type&,
                                  const normalized_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CurrentDensityGradient (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CurrentDensityGradient (const CurrentDensityGradient& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CurrentDensityGradient*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CurrentDensityGradient ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< lessThan_type > lessThan_;
          ::xsd::cxx::tree::one< normalized_type > normalized_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %TimeStepAdjuster schema type.
         *
         * @nosubgrouping
         */
        class TimeStepAdjuster: public ::xml_schema::type
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TimeStepAdjuster ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeStepAdjuster (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeStepAdjuster (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeStepAdjuster (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TimeStepAdjuster (const TimeStepAdjuster& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TimeStepAdjuster*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TimeStepAdjuster ();
        };

        /**
         * @brief Class corresponding to the %SimpleTimeStepAdjuster schema type.
         *
         * @nosubgrouping
         */
        class SimpleTimeStepAdjuster: public ::bio::xml::model::solver::TimeStepAdjuster
        {
          public:
          /**
           * @name factor
           *
           * @brief Accessor and modifier functions for the %factor
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ factor_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< factor_type, char, ::xsd::cxx::tree::schema_type::double_ > factor_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const factor_type&
          factor () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          factor_type&
          factor ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          factor (const factor_type& x);

          //@}

          /**
           * @name everyStepCount
           *
           * @brief Accessor and modifier functions for the %everyStepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer everyStepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< everyStepCount_type, char > everyStepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const everyStepCount_type&
          everyStepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          everyStepCount_type&
          everyStepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          everyStepCount (const everyStepCount_type& x);

          //@}

          /**
           * @name maxStepSize
           *
           * @brief Accessor and modifier functions for the %maxStepSize
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ maxStepSize_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< maxStepSize_type > maxStepSize_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< maxStepSize_type, char, ::xsd::cxx::tree::schema_type::double_ > maxStepSize_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const maxStepSize_optional&
          maxStepSize () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          maxStepSize_optional&
          maxStepSize ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          maxStepSize (const maxStepSize_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          maxStepSize (const maxStepSize_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SimpleTimeStepAdjuster (const factor_type&,
                                  const everyStepCount_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SimpleTimeStepAdjuster (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SimpleTimeStepAdjuster (const SimpleTimeStepAdjuster& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SimpleTimeStepAdjuster*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SimpleTimeStepAdjuster ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< factor_type > factor_;
          ::xsd::cxx::tree::one< everyStepCount_type > everyStepCount_;
          maxStepSize_optional maxStepSize_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %AdaptiveTimeStepAdjuster schema type.
         *
         * Extends simple tine step adjuster by decreasing time step
         * if failure occurs. It also should go back in time in such
         * situation.
         *
         * @nosubgrouping
         */
        class AdaptiveTimeStepAdjuster: public ::bio::xml::model::solver::TimeStepAdjuster
        {
          public:
          /**
           * @name increase
           *
           * @brief Accessor and modifier functions for the %increase
           * required element.
           *
           * Specifies rules for increasing timestep.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::increase increase_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< increase_type, char > increase_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const increase_type&
          increase () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          increase_type&
          increase ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          increase (const increase_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          increase (::std::auto_ptr< increase_type > p);

          //@}

          /**
           * @name fallback
           *
           * @brief Accessor and modifier functions for the %fallback
           * required element.
           *
           * Specifies rules for doing fallback in time.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::fallback fallback_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< fallback_type, char > fallback_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const fallback_type&
          fallback () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          fallback_type&
          fallback ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          fallback (const fallback_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          fallback (::std::auto_ptr< fallback_type > p);

          //@}

          /**
           * @name stateStore
           *
           * @brief Accessor and modifier functions for the %stateStore
           * required element.
           *
           * This element configures storage of intermediate states,
           * used for going back in time.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::ConcentrationProfile stateStore_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< stateStore_type, char > stateStore_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const stateStore_type&
          stateStore () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          stateStore_type&
          stateStore ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          stateStore (const stateStore_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          stateStore (::std::auto_ptr< stateStore_type > p);

          //@}

          /**
           * @name stopCondition
           *
           * @brief Accessor and modifier functions for the %stopCondition
           * sequence element.
           *
           * Stop conditions used to determine "bad" state.
           * These can also report good states also.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::StopCondition stopCondition_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< stopCondition_type > stopCondition_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef stopCondition_sequence::iterator stopCondition_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef stopCondition_sequence::const_iterator stopCondition_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< stopCondition_type, char > stopCondition_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const stopCondition_sequence&
          stopCondition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          stopCondition_sequence&
          stopCondition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          stopCondition (const stopCondition_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AdaptiveTimeStepAdjuster (const increase_type&,
                                    const fallback_type&,
                                    const stateStore_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          AdaptiveTimeStepAdjuster (::std::auto_ptr< increase_type >&,
                                    ::std::auto_ptr< fallback_type >&,
                                    ::std::auto_ptr< stateStore_type >&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AdaptiveTimeStepAdjuster (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AdaptiveTimeStepAdjuster (const AdaptiveTimeStepAdjuster& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AdaptiveTimeStepAdjuster*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AdaptiveTimeStepAdjuster ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< increase_type > increase_;
          ::xsd::cxx::tree::one< fallback_type > fallback_;
          ::xsd::cxx::tree::one< stateStore_type > stateStore_;
          stopCondition_sequence stopCondition_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %increase schema type.
         *
         * @nosubgrouping
         */
        class increase: public ::xml_schema::type
        {
          public:
          /**
           * @name factor
           *
           * @brief Accessor and modifier functions for the %factor
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ factor_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< factor_type, char, ::xsd::cxx::tree::schema_type::double_ > factor_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const factor_type&
          factor () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          factor_type&
          factor ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          factor (const factor_type& x);

          //@}

          /**
           * @name everyStepCount
           *
           * @brief Accessor and modifier functions for the %everyStepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer everyStepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< everyStepCount_type, char > everyStepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const everyStepCount_type&
          everyStepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          everyStepCount_type&
          everyStepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          everyStepCount (const everyStepCount_type& x);

          //@}

          /**
           * @name maxStepSize
           *
           * @brief Accessor and modifier functions for the %maxStepSize
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ maxStepSize_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< maxStepSize_type, char, ::xsd::cxx::tree::schema_type::double_ > maxStepSize_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const maxStepSize_type&
          maxStepSize () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          maxStepSize_type&
          maxStepSize ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          maxStepSize (const maxStepSize_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          increase (const factor_type&,
                    const everyStepCount_type&,
                    const maxStepSize_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          increase (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          increase (const increase& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual increase*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~increase ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< factor_type > factor_;
          ::xsd::cxx::tree::one< everyStepCount_type > everyStepCount_;
          ::xsd::cxx::tree::one< maxStepSize_type > maxStepSize_;

          //@endcond
        };

        /**
         * @brief Class corresponding to the %fallback schema type.
         *
         * @nosubgrouping
         */
        class fallback: public ::xml_schema::type
        {
          public:
          /**
           * @name factor
           *
           * @brief Accessor and modifier functions for the %factor
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ factor_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< factor_type, char, ::xsd::cxx::tree::schema_type::double_ > factor_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const factor_type&
          factor () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          factor_type&
          factor ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          factor (const factor_type& x);

          //@}

          /**
           * @name forStepCount
           *
           * @brief Accessor and modifier functions for the %forStepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer forStepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< forStepCount_type, char > forStepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const forStepCount_type&
          forStepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          forStepCount_type&
          forStepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          forStepCount (const forStepCount_type& x);

          //@}

          /**
           * @name checkEveryStepCount
           *
           * @brief Accessor and modifier functions for the %checkEveryStepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer checkEveryStepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< checkEveryStepCount_type, char > checkEveryStepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const checkEveryStepCount_type&
          checkEveryStepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          checkEveryStepCount_type&
          checkEveryStepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          checkEveryStepCount (const checkEveryStepCount_type& x);

          //@}

          /**
           * @name minStepSize
           *
           * @brief Accessor and modifier functions for the %minStepSize
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ minStepSize_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< minStepSize_type, char, ::xsd::cxx::tree::schema_type::double_ > minStepSize_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const minStepSize_type&
          minStepSize () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          minStepSize_type&
          minStepSize ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          minStepSize (const minStepSize_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          fallback (const factor_type&,
                    const forStepCount_type&,
                    const checkEveryStepCount_type&,
                    const minStepSize_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          fallback (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          fallback (const fallback& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual fallback*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~fallback ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< factor_type > factor_;
          ::xsd::cxx::tree::one< forStepCount_type > forStepCount_;
          ::xsd::cxx::tree::one< checkEveryStepCount_type > checkEveryStepCount_;
          ::xsd::cxx::tree::one< minStepSize_type > minStepSize_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace solver
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace solver
      {
        void
        operator<< (::xercesc::DOMElement&, const FiniteDifferences&);

        void
        operator<< (::xercesc::DOMElement&, const Explicit1D&);

        void
        operator<< (::xercesc::DOMElement&, const Implicit1D&);

        void
        operator<< (::xercesc::DOMElement&, const Explicit2D&);

        void
        operator<< (::xercesc::DOMElement&, const Implicit2D&);

        void
        operator<< (::xercesc::DOMElement&, const Axis&);

        void
        operator<< (::xercesc::DOMElement&, const ConstantAxisPart&);

        void
        operator<< (::xercesc::DOMElement&, const BilinearAxisPart&);

        void
        operator<< (::xercesc::DOMElement&, const ConcentrationProfile&);

        void
        operator<< (::xercesc::DOMElement&, const CurrentDensity&);

        void
        operator<< (::xercesc::DOMElement&, const AveragedConcentration&);

        void
        operator<< (::xercesc::DOMElement&, const SteadyStateHalfTime&);

        void
        operator<< (::xercesc::DOMElement&, const SteadyState&);

        void
        operator<< (::xercesc::DOMElement&, const Kinetic&);

        void
        operator<< (::xercesc::DOMElement&, const StopCondition&);

        void
        operator<< (::xercesc::DOMAttr&, const StopCondition&);

        void
        operator<< (::xml_schema::list_stream&,
                    const StopCondition&);

        void
        operator<< (::xercesc::DOMElement&, const StopConditionValidAfter&);

        void
        operator<< (::xercesc::DOMElement&, const FailIfAbove&);

        void
        operator<< (::xercesc::DOMElement&, const FailIfInvalidConcentrations&);

        void
        operator<< (::xercesc::DOMAttr&, const FailIfInvalidConcentrations&);

        void
        operator<< (::xml_schema::list_stream&,
                    const FailIfInvalidConcentrations&);

        void
        operator<< (::xercesc::DOMElement&, const FailOnConcentrationOscillation&);

        void
        operator<< (::xercesc::DOMAttr&, const FailOnConcentrationOscillation&);

        void
        operator<< (::xml_schema::list_stream&,
                    const FailOnConcentrationOscillation&);

        void
        operator<< (::xercesc::DOMElement&, const FailISumOfConcentrationsNonConst&);

        void
        operator<< (::xercesc::DOMElement&, const CurrentDensityGradient&);

        void
        operator<< (::xercesc::DOMElement&, const TimeStepAdjuster&);

        void
        operator<< (::xercesc::DOMAttr&, const TimeStepAdjuster&);

        void
        operator<< (::xml_schema::list_stream&,
                    const TimeStepAdjuster&);

        void
        operator<< (::xercesc::DOMElement&, const SimpleTimeStepAdjuster&);

        void
        operator<< (::xercesc::DOMElement&, const AdaptiveTimeStepAdjuster&);

        void
        operator<< (::xercesc::DOMElement&, const increase&);

        void
        operator<< (::xercesc::DOMElement&, const fallback&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MODEL_SOLVER_HXX
