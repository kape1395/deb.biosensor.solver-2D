// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ModelReaction.hxx"

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace reaction
      {
        // MichaelisMenten
        // 

        const MichaelisMenten::substrate_type& MichaelisMenten::
        substrate () const
        {
          return this->substrate_.get ();
        }

        MichaelisMenten::substrate_type& MichaelisMenten::
        substrate ()
        {
          return this->substrate_.get ();
        }

        void MichaelisMenten::
        substrate (const substrate_type& x)
        {
          this->substrate_.set (x);
        }

        void MichaelisMenten::
        substrate (::std::auto_ptr< substrate_type > x)
        {
          this->substrate_.set (x);
        }

        const MichaelisMenten::product_type& MichaelisMenten::
        product () const
        {
          return this->product_.get ();
        }

        MichaelisMenten::product_type& MichaelisMenten::
        product ()
        {
          return this->product_.get ();
        }

        void MichaelisMenten::
        product (const product_type& x)
        {
          this->product_.set (x);
        }

        void MichaelisMenten::
        product (::std::auto_ptr< product_type > x)
        {
          this->product_.set (x);
        }

        const MichaelisMenten::V_max_type& MichaelisMenten::
        V_max () const
        {
          return this->V_max_.get ();
        }

        MichaelisMenten::V_max_type& MichaelisMenten::
        V_max ()
        {
          return this->V_max_.get ();
        }

        void MichaelisMenten::
        V_max (const V_max_type& x)
        {
          this->V_max_.set (x);
        }

        void MichaelisMenten::
        V_max (::std::auto_ptr< V_max_type > x)
        {
          this->V_max_.set (x);
        }

        const MichaelisMenten::K_M_type& MichaelisMenten::
        K_M () const
        {
          return this->K_M_.get ();
        }

        MichaelisMenten::K_M_type& MichaelisMenten::
        K_M ()
        {
          return this->K_M_.get ();
        }

        void MichaelisMenten::
        K_M (const K_M_type& x)
        {
          this->K_M_.set (x);
        }

        void MichaelisMenten::
        K_M (::std::auto_ptr< K_M_type > x)
        {
          this->K_M_.set (x);
        }


        // ReductionOxidation
        // 

        const ReductionOxidation::substrate_sequence& ReductionOxidation::
        substrate () const
        {
          return this->substrate_;
        }

        ReductionOxidation::substrate_sequence& ReductionOxidation::
        substrate ()
        {
          return this->substrate_;
        }

        void ReductionOxidation::
        substrate (const substrate_sequence& s)
        {
          this->substrate_ = s;
        }

        const ReductionOxidation::product_sequence& ReductionOxidation::
        product () const
        {
          return this->product_;
        }

        ReductionOxidation::product_sequence& ReductionOxidation::
        product ()
        {
          return this->product_;
        }

        void ReductionOxidation::
        product (const product_sequence& s)
        {
          this->product_ = s;
        }

        const ReductionOxidation::rate_type& ReductionOxidation::
        rate () const
        {
          return this->rate_.get ();
        }

        ReductionOxidation::rate_type& ReductionOxidation::
        rate ()
        {
          return this->rate_.get ();
        }

        void ReductionOxidation::
        rate (const rate_type& x)
        {
          this->rate_.set (x);
        }

        void ReductionOxidation::
        rate (::std::auto_ptr< rate_type > x)
        {
          this->rate_.set (x);
        }


        // ReductionOxidationElement
        // 

        const ReductionOxidationElement::name_type& ReductionOxidationElement::
        name () const
        {
          return this->name_.get ();
        }

        ReductionOxidationElement::name_type& ReductionOxidationElement::
        name ()
        {
          return this->name_.get ();
        }

        void ReductionOxidationElement::
        name (const name_type& x)
        {
          this->name_.set (x);
        }

        void ReductionOxidationElement::
        name (::std::auto_ptr< name_type > x)
        {
          this->name_.set (x);
        }

        const ReductionOxidationElement::coefficient_type& ReductionOxidationElement::
        coefficient () const
        {
          return this->coefficient_.get ();
        }

        ReductionOxidationElement::coefficient_type& ReductionOxidationElement::
        coefficient ()
        {
          return this->coefficient_.get ();
        }

        void ReductionOxidationElement::
        coefficient (const coefficient_type& x)
        {
          this->coefficient_.set (x);
        }

        ReductionOxidationElement::coefficient_type ReductionOxidationElement::
        coefficient_default_value ()
        {
          return coefficient_type (1LL);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace reaction
      {
        // MichaelisMenten
        //

        MichaelisMenten::
        MichaelisMenten (const name_type& name,
                         const substrate_type& substrate,
                         const product_type& product,
                         const V_max_type& V_max,
                         const K_M_type& K_M)
        : ::bio::xml::model::Reaction (name),
          substrate_ (substrate, ::xml_schema::flags (), this),
          product_ (product, ::xml_schema::flags (), this),
          V_max_ (V_max, ::xml_schema::flags (), this),
          K_M_ (K_M, ::xml_schema::flags (), this)
        {
        }

        MichaelisMenten::
        MichaelisMenten (const MichaelisMenten& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::bio::xml::model::Reaction (x, f, c),
          substrate_ (x.substrate_, f, this),
          product_ (x.product_, f, this),
          V_max_ (x.V_max_, f, this),
          K_M_ (x.K_M_, f, this)
        {
        }

        MichaelisMenten::
        MichaelisMenten (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::bio::xml::model::Reaction (e, f | ::xml_schema::flags::base, c),
          substrate_ (f, this),
          product_ (f, this),
          V_max_ (f, this),
          K_M_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void MichaelisMenten::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Reaction::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "substrate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< substrate_type > r (
                substrate_traits::create (i, f, this));

              this->substrate_.set (r);
              continue;
            }

            if (n.name () == "product" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< product_type > r (
                product_traits::create (i, f, this));

              this->product_.set (r);
              continue;
            }

            if (n.name () == "V_max" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< V_max_type > r (
                V_max_traits::create (i, f, this));

              this->V_max_.set (r);
              continue;
            }

            if (n.name () == "K_M" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< K_M_type > r (
                K_M_traits::create (i, f, this));

              this->K_M_.set (r);
              continue;
            }
          }

          if (!substrate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "substrate",
              "");
          }

          if (!product_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "product",
              "");
          }

          if (!V_max_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "V_max",
              "");
          }

          if (!K_M_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "K_M",
              "");
          }
        }

        MichaelisMenten* MichaelisMenten::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class MichaelisMenten (*this, f, c);
        }

        MichaelisMenten::
        ~MichaelisMenten ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, MichaelisMenten >
        _xsd_MichaelisMenten_type_factory_init (
          "MichaelisMenten",
          "http://karolis.5grupe.lt/biosensor/model/reaction");

        // ReductionOxidation
        //

        ReductionOxidation::
        ReductionOxidation (const name_type& name,
                            const rate_type& rate)
        : ::bio::xml::model::Reaction (name),
          substrate_ (::xml_schema::flags (), this),
          product_ (::xml_schema::flags (), this),
          rate_ (rate, ::xml_schema::flags (), this)
        {
        }

        ReductionOxidation::
        ReductionOxidation (const ReductionOxidation& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::bio::xml::model::Reaction (x, f, c),
          substrate_ (x.substrate_, f, this),
          product_ (x.product_, f, this),
          rate_ (x.rate_, f, this)
        {
        }

        ReductionOxidation::
        ReductionOxidation (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::bio::xml::model::Reaction (e, f | ::xml_schema::flags::base, c),
          substrate_ (f, this),
          product_ (f, this),
          rate_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void ReductionOxidation::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Reaction::parse (p, f);

          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // substrate
            //
            {
              ::xsd::cxx::tree::type_factory_map< char >& tfm (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

              ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
                tfm.create (
                  "substrate",
                  "http://karolis.5grupe.lt/biosensor/model/reaction",
                  &::xsd::cxx::tree::factory_impl< substrate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::auto_ptr< substrate_type > r (
                  dynamic_cast< substrate_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->substrate_.push_back (r);
                continue;
              }
            }

            // product
            //
            {
              ::xsd::cxx::tree::type_factory_map< char >& tfm (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

              ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
                tfm.create (
                  "product",
                  "http://karolis.5grupe.lt/biosensor/model/reaction",
                  &::xsd::cxx::tree::factory_impl< product_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::auto_ptr< product_type > r (
                  dynamic_cast< product_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->product_.push_back (r);
                continue;
              }
            }

            break;
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "rate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< rate_type > r (
                rate_traits::create (i, f, this));

              this->rate_.set (r);
              continue;
            }
          }

          if (!rate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "rate",
              "");
          }
        }

        ReductionOxidation* ReductionOxidation::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ReductionOxidation (*this, f, c);
        }

        ReductionOxidation::
        ~ReductionOxidation ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReductionOxidation >
        _xsd_ReductionOxidation_type_factory_init (
          "ReductionOxidation",
          "http://karolis.5grupe.lt/biosensor/model/reaction");

        // ReductionOxidationElement
        //

        ReductionOxidationElement::
        ReductionOxidationElement (const name_type& name)
        : ::xml_schema::type (),
          name_ (name, ::xml_schema::flags (), this),
          coefficient_ (coefficient_default_value (), ::xml_schema::flags (), this)
        {
        }

        ReductionOxidationElement::
        ReductionOxidationElement (const ReductionOxidationElement& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          name_ (x.name_, f, this),
          coefficient_ (x.coefficient_, f, this)
        {
        }

        ReductionOxidationElement::
        ReductionOxidationElement (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          name_ (f, this),
          coefficient_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void ReductionOxidationElement::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< name_type > r (
                name_traits::create (i, f, this));

              this->name_.set (r);
              continue;
            }

            if (n.name () == "coefficient" && n.namespace_ ().empty ())
            {
              this->coefficient_.set (coefficient_traits::create (i, f, this));
              continue;
            }
          }

          if (!name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name",
              "");
          }

          if (!coefficient_.present ())
          {
            this->coefficient_.set (coefficient_default_value ());
          }
        }

        ReductionOxidationElement* ReductionOxidationElement::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ReductionOxidationElement (*this, f, c);
        }

        ReductionOxidationElement::
        ~ReductionOxidationElement ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ReductionOxidationElement >
        _xsd_ReductionOxidationElement_type_factory_init (
          "ReductionOxidationElement",
          "http://karolis.5grupe.lt/biosensor/model/reaction");
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace reaction
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace reaction
      {
        void
        operator<< (::xercesc::DOMElement& e, const MichaelisMenten& i)
        {
          e << static_cast< const ::bio::xml::model::Reaction& > (i);

          // substrate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "substrate",
                e));

            a << i.substrate ();
          }

          // product
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "product",
                e));

            a << i.product ();
          }

          // V_max
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "V_max",
                e));

            a << i.V_max ();
          }

          // K_M
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "K_M",
                e));

            a << i.K_M ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MichaelisMenten >
        _xsd_MichaelisMenten_type_serializer_init (
          "MichaelisMenten",
          "http://karolis.5grupe.lt/biosensor/model/reaction");


        void
        operator<< (::xercesc::DOMElement& e, const ReductionOxidation& i)
        {
          e << static_cast< const ::bio::xml::model::Reaction& > (i);

          // substrate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ReductionOxidation::substrate_const_iterator
                 b (i.substrate ().begin ()), n (i.substrate ().end ());
                 b != n; ++b)
            {
              if (typeid (ReductionOxidation::substrate_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "substrate",
                    "http://karolis.5grupe.lt/biosensor/model/reaction",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "substrate",
                  "http://karolis.5grupe.lt/biosensor/model/reaction",
                  false, true, e, *b);
            }
          }

          // product
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ReductionOxidation::product_const_iterator
                 b (i.product ().begin ()), n (i.product ().end ());
                 b != n; ++b)
            {
              if (typeid (ReductionOxidation::product_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "product",
                    "http://karolis.5grupe.lt/biosensor/model/reaction",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "product",
                  "http://karolis.5grupe.lt/biosensor/model/reaction",
                  false, true, e, *b);
            }
          }

          // rate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "rate",
                e));

            a << i.rate ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReductionOxidation >
        _xsd_ReductionOxidation_type_serializer_init (
          "ReductionOxidation",
          "http://karolis.5grupe.lt/biosensor/model/reaction");


        void
        operator<< (::xercesc::DOMElement& e, const ReductionOxidationElement& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name",
                e));

            a << i.name ();
          }

          // coefficient
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "coefficient",
                e));

            a << i.coefficient ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ReductionOxidationElement >
        _xsd_ReductionOxidationElement_type_serializer_init (
          "ReductionOxidationElement",
          "http://karolis.5grupe.lt/biosensor/model/reaction");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

